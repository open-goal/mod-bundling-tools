name: "Bundle OpenGOAL Mod"
on:
  workflow_call:
    inputs:
      outputDir:
        description: "The directory that the releases assets are created and temporarily stored in. Defaults to ./bundler"
        required: false
        default: "./bundler"
        type: "string"
      semverBump:
        description: "What semver bump to use - patch|minor|major. Defaults to patch"
        required: false
        default: "patch"
        type: "string"
      toolingVersion:
        description: "The version of `jak-project` to bundle. Defaults to latest version."
        required: false
        default: "latest"
        type: "string"
      toolingBinaryDir:
        description: "If provided, will bundle the binaries from this location instead of using the official `jak-project` release."
        required: false
        default: ""
        type: "string"
      textureReplacementDir:
        description: "The directory containing texture replacements, defaults to `./texture_replacements`"
        required: false
        default: "./texture_replacements"
        type: "string"
      customLevelsDir:
        description: "The directory containing custom levels, defaults to `./custom_levels`"
        required: false
        default: "./texture_replacements"
        type: "string"
      goalSourceDir:
        description: "The directory containing the OpenGOAL source code, defaults to `./goal_src`"
        required: false
        default: "./goal_src"
        type: "string"
      skipWindows:
        description: "Whether to skip Windows builds, defaults to `false`"
        required: false
        default: false
        type: "boolean"
      skipLinux:
        description: "Whether to skip Linux builds, defaults to `false`"
        required: false
        default: false
        type: "boolean"
    secrets:
      token:
        description: "GitHub token used to create the release and push assets to it."
        required: true
    outputs:
      version:
        description: "The version that was tagged and pushed for the mod"
        value: ${{ steps.random-number-generator.outputs.random-number }}
jobs:
  create-tag:
    runs-on: ubuntu-latest
    outputs:
      bundleTagName: ${{ steps.tag_version.outputs.new_tag }}
    steps:
      - name: Bump Version and Push Tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.token }}
          tag_prefix: v
          default_bump: ${{ inputs.semverBump }}

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
        run: gh release create ${{ steps.tag_version.outputs.new_tag }} --generate-notes --draft --repo ${{ github.repository }}

  create-windows-bundle:
    needs: create-tag
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Repository"
        if: (inputs.skipWindows == 'false')
        uses: actions/checkout@v3

      - name: "Checkout Workflow Scripts"
        if: (inputs.skipWindows == 'false')
        uses: actions/checkout@v3
        with:
          repository: "jak-project/mod-bundler-gha"
          ref: ${{ github.event.inputs.ref }}
          path: "__actions/mod-bundler-gha"

      - name: "Create Windows Release"
        if: (inputs.skipWindows == 'false')
        env:
          outputDir: ${{ inputs.outputDir }}
          versionName: ${{ needs.create-tag.outputs.bundleTagName }}
          toolingVersion: ${{ inputs.toolingVersion }}
          toolingBinaryDir: ${{ inputs.toolingBinaryDir }}
          textureReplacementDir: ${{ inputs.textureReplacementDir }}
          customLevelsDir: ${{ inputs.customLevelsDir }}
          goalSourceDir: ${{ inputs.goalSourceDir }}
        run: |
          python ./__actions/mod-bundler-gha/scripts/bundle-windows.py

      - name: Upload Bundle
        uses: actions/upload-artifact@v3
        with:
          name: windows
          if-no-files-found: error
          path: ${{ inputs.outputDir }}/dist

  create-linux-bundle:
    needs: create-tag
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Repository"
        if: (inputs.skipLinux == 'false')
        uses: actions/checkout@v3

      - name: "Checkout Workflow Scripts"
        if: (inputs.skipLinux == 'false')
        uses: actions/checkout@v3
        with:
          repository: "jak-project/mod-bundler-gha"
          ref: ${{ github.event.inputs.ref }}
          path: "__actions/mod-bundler-gha"

      - name: "Create Linux Release"
        if: (inputs.skipLinux == 'false')
        env:
          outputDir: ${{ inputs.outputDir }}
          versionName: ${{ needs.create-tag.outputs.bundleTagName }}
          toolingVersion: ${{ inputs.toolingVersion }}
          toolingBinaryDir: ${{ inputs.toolingBinaryDir }}
          textureReplacementDir: ${{ inputs.textureReplacementDir }}
          customLevelsDir: ${{ inputs.customLevelsDir }}
          goalSourceDir: ${{ inputs.goalSourceDir }}
        run: |
          python ./__actions/mod-bundler-gha/scripts/bundle-linux.py

      - name: Upload Bundle
        uses: actions/upload-artifact@v3
        with:
          name: linux
          if-no-files-found: error
          path: ${{ inputs.outputDir }}/dist

  finalize-release:
    needs: [create-windows-bundle, create-linux-bundle]
    runs-on: ubuntu-latest
    steps:
      - name: Prepare Output Folder
        run: mkdir -p ${{ inputs.outputDir }}/dist

      - name: Download all Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ inputs.outputDir }}/dist

      - name: Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
        run: |
          TAG_VAL=${{ needs.create-tag.outputs.bundleTagName }}
          echo $TAG_VAL
          gh release upload "${TAG_VAL}" ${{ github.WORKSPACE }}/${{ inputs.outputDir }}/dist/* --repo ${{ github.repository }} --clobber

      - name: Publish Release
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
        run: |
          TAG_VAL=${{ needs.create-tag.outputs.bundleTagName }}
          echo $TAG_VAL
          gh release edit ${TAG_VAL} --draft=false --repo ${{ github.repository }}
